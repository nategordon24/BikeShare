type = "source"
)
install.packages(c("RCurl", "jsonlite", "statmod"))
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
h2o::h2o.init()
h2o::h2o.init()
library(agua)
library(h2o)
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
# Load CSV
train <- vroom("train.csv")
setwd("~/Documents/BYU Fall Semester 2025/STAT 348/Competitions/BikeShare")
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# Recipe
bike_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# Define model
auto_model <- auto_ml() %>%
set_engine("h2o", max_runtime_secs=120, max_models=20) %>%
set_mode("regression")
## Combine into Workflow
automl_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(auto_model) %>%
fit(data=train)
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
h2o::h2o.init()
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# Recipe
bike_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# Define model
auto_model <- auto_ml() %>%
set_engine("h2o", max_runtime_secs=120, max_models=20) %>%
set_mode("regression")
## Combine into Workflow
automl_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(auto_model) %>%
fit(data=train)
tree_preds <- predict(automl_wf, new_data = test)
# Kaggle submission
tree_submission <- tree_preds %>%
bind_cols(test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count),
datetime = as.character(format(datetime)))
vroom_write(tree_submission, "./TreePreds.csv", delim = ",")
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
h2o::h2o.init()
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# Recipe
bike_recipe <- recipe(log1p(count) ~ ., data = train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
h2o::h2o.init()
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# Recipe
bike_recipe <- recipe(count ~ ., data = train) %>%
# transform the outcome to log1p
step_mutate(count = log1p(count)) %>%
# clean weather
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
# time features
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
# encoding + scaling
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
# drop datetime raw column
step_rm(datetime)
# Define model
auto_model <- auto_ml() %>%
set_engine("h2o", max_runtime_secs=120, max_models=20) %>%
set_mode("regression")
## Combine into Workflow
automl_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(auto_model) %>%
fit(data=train)
tree_preds <- predict(automl_wf, new_data = test) %>%
mutate(.pred = pmax(0, expm1(.pred)))
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
h2o::h2o.init()
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# Recipe
bike_recipe <- recipe(count ~ ., data = train) %>%
step_log(count, offset = 1) %>%   # same as log1p()
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# Kaggle submission
tree_submission <- tree_preds %>%
bind_cols(test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count),
datetime = as.character(format(datetime)))
vroom_write(tree_submission, "./TreePreds.csv", delim = ",")
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
h2o::h2o.init()
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# Recipe
bike_recipe <- recipe(count ~ ., data = train) %>%
step_log(count, offset = 1) %>%   # same as log1p()
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# Kaggle submission
tree_submission <- tree_preds %>%
bind_cols(test) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(count = pmax(0, count),
datetime = as.character(format(datetime)))
vroom_write(tree_submission, "./TreePreds.csv", delim = ",")
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
h2o::h2o.init()
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# -----------------------
# Recipe
# -----------------------
bike_recipe <- recipe(count ~ ., data = train) %>%
step_log(count, offset = 1) %>%   # log1p(count)
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# -----------------------
# Model
# -----------------------
auto_model <- auto_ml() %>%
set_engine("h2o", max_runtime_secs = 240, max_models = 50) %>%
set_mode("regression")
# -----------------------
# Workflow
# -----------------------
automl_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(auto_model) %>%
fit(data = train)
# -----------------------
# Predictions (back-transform)
# -----------------------
tree_preds <- predict(automl_wf, new_data = test) %>%
mutate(.pred = pmax(0, expm1(.pred)))   # undo log1p()
library(tidymodels)
library(tidyverse)
library(vroom)
library(glmnet)
library(lubridate)
library(bonsai)
library(lightgbm)
library(agua)
library(h2o)
h2o::h2o.init()
# Load CSV
train <- vroom("train.csv")
test  <- vroom("test.csv")
# Remove casual/registered
train <- train %>%
select(-any_of(c("registered", "casual")))
# -----------------------
# Recipe
# -----------------------
bike_recipe <- recipe(count ~ ., data = train) %>%
step_log(all_outcomes(), offset = 1) %>%   # log1p(count), only during training
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# -----------------------
# Model
# -----------------------
auto_model <- auto_ml() %>%
set_engine("h2o", max_runtime_secs = 240, max_models = 50) %>%
set_mode("regression")
# -----------------------
# Workflow
# -----------------------
automl_wf <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(auto_model) %>%
fit(data = train)
# -----------------------
# Predictions (back-transform)
# -----------------------
tree_preds <- predict(automl_wf, new_data = test) %>%
mutate(.pred = pmax(0, expm1(.pred)))   # undo log1p()
setwd("~/Documents/BYU Fall Semester 2025/STAT 348/Competitions/BikeShare")
library(vroom)
library(tidymodels)
# Load data
train <- vroom("train.csv")
# Remove columns not used for modeling
train <- train %>%
select(-any_of(c("registered", "casual")))
# Define recipe (without log transform)
bike_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# Prep recipe
prepped_recipe <- prep(bike_recipe)
# Bake train and test sets
baked_train <- bake(prepped_recipe, new_data = NULL)   # applies to train
# Export to CSV for DataRobot
write.csv(baked_train, "train_preprocessed.csv", row.names = FALSE)
library(tidymodels)
library(tidyverse)
library(vroom)
# Load train
train <- vroom("train.csv") %>%
select(-any_of(c("registered", "casual")))
# Recipe (no log transform so DataRobot sees raw count)
bike_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_time(datetime, features = "hour") %>%
step_mutate(
hour_sin = sin(2 * pi * datetime_hour / 24),
hour_cos = cos(2 * pi * datetime_hour / 24)
) %>%
step_date(datetime, features = "dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
# Prep and bake
prepped_recipe <- prep(bike_recipe)
baked_train <- bake(prepped_recipe, new_data = NULL)
# Export for DataRobot
write.csv(baked_train, "train_preprocessed.csv", row.names = FALSE)
# Load test
test <- vroom("test.csv")
# Bake test set with the same recipe
baked_test <- bake(prepped_recipe, new_data = test)
# Export for DataRobot predictions
write.csv(baked_test, "test_preprocessed.csv", row.names = FALSE)
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv")
colnames(datarobot_preds)
datarobot_preds <- vroom("datarobotresults.csv")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
View(datarobot_preds)
tree_submission <- datarobot_preds %>%
bind_cols(test) %>%
select(datetime, count_PREDICTION) %>%
rename(count = count_PREDICTION) %>%
mutate(
count = round(count),
datetime = as.character(datetime)
)
vroom_write(tree_submission, "./TreePreds.csv", delim = ",")
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
tree_submission <- test %>%
select(datetime) %>%
bind_cols(datarobot_preds %>% select(count_PREDICTION)) %>%
rename(count = count_PREDICTION) %>%
mutate(
count = round(count),
datetime = as.character(datetime)
)
vroom_write(tree_submission, "./DataRobot.csv", delim = ",")
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
tree_submission <- test %>%
select(datetime) %>%
bind_cols(datarobot_preds %>% select(count_PREDICTION)) %>%
rename(count = count_PREDICTION) %>%
mutate(
datetime = as.character(datetime)
)
vroom_write(tree_submission, "./DataRobot.csv", delim = ",")
# Load original test with datetime
test <- vroom("test.csv")
test <- test %>%
mutate(datetime = ymd_hms(datetime))  # parses "YYYY-MM-DD HH:MM:SS"
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
tree_submission <- test %>%
select(datetime) %>%
bind_cols(datarobot_preds %>% select(count_PREDICTION)) %>%
rename(count = count_PREDICTION) %>%
mutate(
datetime = as.character(datetime)
)
vroom_write(tree_submission, "./DataRobot.csv", delim = ",")
# Load original test with datetime
test <- vroom("test.csv")
test <- test %>%
mutate(datetime = as.charcter(datetime))
# Load original test with datetime
test <- vroom("test.csv")
test <- test %>%
mutate(datetime = as.character(datetime))
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
tree_submission <- test %>%
select(datetime) %>%
bind_cols(datarobot_preds %>% select(count_PREDICTION)) %>%
rename(count = count_PREDICTION) %>%
mutate(
datetime = as.character(datetime)
)
vroom_write(tree_submission, "./DataRobot.csv", delim = ",")
# Load original test with datetime
test <- vroom("test.csv")
test <- test %>%
mutate(datetime = as.character(datetime))
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
tree_submission <- test %>%
select(datetime) %>%
bind_cols(datarobot_preds %>% select(count_PREDICTION)) %>%
rename(count = count_PREDICTION) %>%
mutate(
datetime = as.character(format(datetime))
)
vroom_write(tree_submission, "./DataRobot.csv", delim = ",")
# Load original test with datetime
test <- vroom("test.csv")
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
tree_submission <- datarobot_preds %>%
bindcols(test) %>%
select(datetime, count_PREDICTION) %>%
rename(count = count_PREDICTION) %>%
mutate(count = pmax(0, count),
datetime = as.character(format(datetime)))
# Load original test with datetime
test <- vroom("test.csv")
# Load predictions (assume single column, e.g. "prediction")
datarobot_preds <- vroom("datarobotresults.csv", delim = ",")
tree_submission <- datarobot_preds %>%
bind_cols(test) %>%
select(datetime, count_PREDICTION) %>%
rename(count = count_PREDICTION) %>%
mutate(count = pmax(0, count),
datetime = as.character(format(datetime)))
vroom_write(tree_submission, "./DataRobot.csv", delim = ",")
